package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import model.PositionHistogram;
import model.Walker;
import modelExt.SimulationExt;

/**
 *
 * @author tadaki
 */
public class DrawPanel extends javax.swing.JPanel implements ChangeListener {

    private SimulationExt simulation;
    private final int n = 100000;
    private final long seed = 48L;
    private final Dimension dimension;
    private BufferedImage image;
    private final int xmax = 100;

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
        dimension = getPreferredSize();
        initalize();
    }

    private void initalize() {
        simulation = new SimulationExt(n, seed);
        simulation.addChangeListenr(this);
        initImage();

    }

    @Override
    public void stateChanged(ChangeEvent e) {
        List<Walker> walkers = simulation.getWalkers();
        createImage(walkers);
    }

    private void initImage() {
        image = new BufferedImage(dimension.width, dimension.height,
                BufferedImage.TYPE_INT_ARGB);
        Color bg = Color.WHITE;
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(bg);
        g.fillRect(0, 0, dimension.width, dimension.height);
    }

    private void createImage(List<Walker> walkers) {
        initImage();
        List<Point2D.Double> pList = PositionHistogram.getHist(walkers, -xmax, xmax);
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(Color.BLUE);
        g.translate(.5 * dimension.width, .95 * dimension.height);
        double fx = .9 * dimension.width / (2 * xmax);
        double fy = 10.*.9 * dimension.height;
        int numBin = pList.size();
        double w = 2. * xmax / numBin;
        g.scale(1, -1);
        for (Point2D.Double p : pList) {
            double x = p.x;
            double y = p.y;
            Rectangle2D.Double h
                    = new Rectangle2D.Double(fx * (x - w / 2), 0., fx * w, fy * y);
            g.fill(h);
        }
        repaint();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }

    public void start() {
        simulation.start();
        new Thread(simulation).start();
    }

    public void stop() {
        simulation.stop();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
