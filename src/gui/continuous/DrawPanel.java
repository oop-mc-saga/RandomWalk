package gui.continuous;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.List;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import randomNumbers.AbstractRandom;
import continuousModel.*;
import histogram.Histogram;

/**
 *
 * @author tadaki
 */
public class DrawPanel extends javax.swing.JPanel implements ChangeListener {

    private SimulationExt simulation;
    private final int n = 100000;
    private final Dimension dimension;
    private AbstractRandom random;
    private BufferedImage image;
    private double w = 1.;
    private final double offset = .05;
    private final double xMax = 100.;
    private double fx;
    private double fy;

    /**
     * Creates new form DrawPanel
     */
    public DrawPanel() {
        initComponents();
        dimension = getPreferredSize();
        initialize();
    }

    /**
     * Initialize the simulation
     */
    private void initialize() {
        simulation = new SimulationExt(n, random);
        // add this object as a listener to the simulation
        simulation.addChangeListenr(this);
        image = new BufferedImage(dimension.width, dimension.height,
                BufferedImage.TYPE_INT_ARGB);
        clearImage();
        // defining scaling factors
        fx = (1 - 2 * offset) * dimension.width / (2 * xMax);
        fy = 10. * (1 - 2 * offset) * dimension.height;
    }

    /**
     * ChangeListener interface
     *
     * This method is called when the state of the simulation is changed
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        List<Walker> walkers = simulation.getWalkers();
        createImage(walkers);
    }

    /**
     * Clear the image
     */
    private void clearImage() {
        Color bg = Color.WHITE;
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(bg);
        g.fillRect(0, 0, dimension.width, dimension.height);
    }

    /**
     * Create an image of the histogram
     *
     * @param walkers
     */
    private void createImage(List<Walker> walkers) {
        clearImage();
        List<Point2D.Double> pList = createHistogram(walkers);
        Graphics2D g = (Graphics2D) image.getGraphics();
        g.setColor(Color.BLUE);
        g.translate(offset * dimension.width, (1 - offset) * dimension.height);
        g.translate(fx * xMax, 0.);
        int numBin = pList.size();
        double w = 2 * xMax / numBin;
        g.scale(1, -1);// reverse the y-axis
        pList.forEach(p -> {
            Rectangle2D.Double rectangle = new Rectangle2D.Double(
                    fx * (p.x - w / 2), 0., fx * w, fy * p.y);
            g.fill(rectangle);
        });
        repaint();
    }

    /**
     * Create a histogram of the x-coordinate of walkers
     * 
     * @param walkers
     * @return
     */
    private List<Point2D.Double> createHistogram(List<Walker> walkers) {
        // find the range of x
        double min = Double.POSITIVE_INFINITY;
        double max = Double.NEGATIVE_INFINITY;
        for (Walker walker : walkers) {
            double x = walker.getX();
            if (x < min) {
                min = x;
            }
            if (x > max) {
                max = x;
            }
        }
        // Creating histogram
        Histogram histogram = new Histogram(
                Histogram.discretize(min, w), Histogram.discretize(max, w), w);
        walkers.forEach(walker -> histogram.put(walker.getX()));
        return histogram.calculateFrequency();
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(image, 0, 0, this);
    }

    public void start() {
        simulation.start();
        new Thread(simulation).start();
    }

    public void stop() {
        simulation.stop();
    }

    public void setRandom(AbstractRandom random) {
        this.random = random;
        initialize();
    }

    public void setW(double w) {
        this.w = w;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(800, 800));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
